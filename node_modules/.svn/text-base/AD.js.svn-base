/**
 * @class AD_Server
 * @parent index 6
 *
 * ###Server side global AD namespace. 
 *  
 * This is our global AppDev object that provides shared resources among all our scripts.
 * We namespace them under AD.[Catagory].[resource] 
 *  
 * * AD = { Util:{}, Page:{}, Data:{}, Comm:{} }; // create logical organization of data here
 * * AD.Page.return = function (){}  // instead of returnPage();
 * * AD.Page.addCSS = function (){}  // instead of addCSS();
 * * AD.Page.addJavascripts = function(){} // instead of addJavascripts();
 * * AD.Viewer  = require('viewer.js'); // instead of Viewer = require...
 * * AD.Data.DataManager = require('dataManager');
 * * AD.Data.DataMultilingual = ...
 * * AD.Comm.ResponseService = 
 * * AD.Defaults
 * * AD.Util.__appdevPath = ... 
 */
AD = { App:{}, Comm:{}, Defaults:{}, Lang:{}, Model:{},  Util:{}  };



/*
 * @class AD.jQuery
 * @parent AD_Server
 * 
 * A copy of jQuery for node.  Enables us to utilize jQuery library tools in
 * our scripts.
 */
AD.jQuery = require('jquery-deferred');


/*
 * @class AD.Util
 * @parent AD_Server
 * 
 * A collection of resources to perform various tasks.
 */

AD.Util.Log = require('log.js').log;
AD.Util.LogDump = require('log.js').logDump;
AD.Util.Error = require('log.js').error;
AD.Util.ErrorDump = require('log.js').errorDump;


/* @class AD.Util.Temp
 * @parent AD.Util
 * 
 * Temporary File and Directory support  (see https://github.com/bruce/node-temp)
 */
AD.Util.Temp = require('temp');


// after trying to find a good global string replace, yet again:
AD.Util.String = {};
AD.Util.String.replaceAll = function (origString, replaceThis, withThis) {
    var re = new RegExp(RegExpQuote(replaceThis),"g"); 
    return origString.replace(re, withThis);
};


 RegExpQuote = function(str) {
      return str.replace(/([.?*+^$[\]\\(){}-])/g, "\\$1");
 };


/*
 * @class AD.Defaults
 * @parent AD_Server
 * 
 * The default site settings from our configuration file (appDev/node_modules/defaults.js).
 */
AD.Defaults = require('defaults.js');



/*
 * @class AD.Lang
 * @parent AD_Server
 * 
 * Shared resources related to Language.
 * 
 * AD.Lang : our multilingual tools.
 */
AD.Lang = require('multilingual.js');



/*
 * @class AD.Model
 * @parent AD_Server
 * 
 * Shared resources related to our Model objects.
 */

/* @class AD.Model.List
 * @parent AD.Model
 * 
 * list of all our created Model objects.
 */
AD.Model.List = {};
/* @class AD.Model.extend 
 * @parent AD.Model
 * @function extend
 * @param name
 * @param definition
 * @param instanceMethods 
 * 
 * method to create a Model object.
 */ 
AD.Model.extend = function (name, definition, instanceMethods ) {
	
	var properties = definition.__serverModel;
	var newObj = {};
	
// @TODO what if instead of 'single'/'multilingual' we provide 'ModelSQL' / 'ModelSQLMultilingual'?
// this way we could have an installed module add a AD.Model[ModelHRIS] = {} definition.
// these dynamic model definitions could then subclass ModelSQL and provide additional 
// features (like db row level permission checking)
// -- framework would need to protect AD.Model.ModelSQL & ModelSQLMultilingual from being overwritten
	
	// if provided definition is not Multilingual
	if (properties.type == 'single') {
		newObj = new AD.Model.ModelSQL(properties);
	} else if (properties.type == 'multilingual') {
		newObj = new AD.Model.ModelSQLMultilingual(properties);
	} else {
	    // don't know; use the standard model
	    newObj = new AD.Model.ModelSQL(properties);
	}
	
	// add any instanceMethods
	for(var o in instanceMethods) {
		newObj[o] = instanceMethods[o];
	}
	
	// carry forward the Module.Model definitions from client:
	newObj.__adModule = definition._adModule;
	newObj.__adModel  = definition._adModel;
	
	newObj.__hub = null;  // placeholder for a module's notification hub
	
	
	// now save to our List of Models.
	AD.Model.List[name] = newObj;
	
	// could also save as global object so we can look identical to client:
	// global[name] = newObj;
}

/* @class AD.Model.Datastore
 * @parent AD.Model
 * 
 * the implementation of the model datastore
 */
AD.Model.Datastore = {};
if (AD.Defaults.dataStoreMethod == AD.Defaults.DATASTORE_MYSQL) { 
    AD.Model.Datastore = require('./dataStore/dataStore_MySQL');
}


/* @class AD.Model.ModelSQL
 * @parent AD.Model
 * 
 * the definition of an SQL based Model
 */
AD.Model.ModelSQL = require('model_SQL.js');
/* @class AD.Model.ModelSQLMultilingual
 * @parent AD.Model
 * 
 * the definition of an SQL based Multilingual Model 
 */
AD.Model.ModelSQLMultilingual = require('model_SQLMultilingual.js');


AD.Defaults.refresh(); // because of dependencies, keep this after Model Loading


/*
 * @class AD.Viewer
 * @parent AD_Server
 * 
 * This is not the actual viewer making the request, but a set of functions
 * that allow us to discover the current viewer.
 * 
 * The current viewer can differ on each request, so refer to `req.aRAD.viewer`
 * for that information.
 */
AD.Viewer = require('viewer.js');



/*
 * @class AD.Auth
 * @parent AD_Server
 * 
 * The Authentication interface for the framework.
 *  
 */
AD.Auth = require('authentication.js');







/*
 * @class AD.Comm
 * @parent AD_Server
 * 
 * A collection of Communications resources.
 */

/* @class AD.Comm.Dispatch 
 * @parent AD.Comm
 * 
 * A Pub/Sub messaging capability among Server and Clients.
 */ 
AD.Comm.Dispatch = require('comm_dispatch.js');

/* @class AD.Comm.Notification 
 * @parent AD.Comm
 *
 * A NotificationCenter for message passing (server side)
 */
AD.Comm.Notification = require('comm_notification.js');


/* @class AD.Comm.Service
 * @parent AD.Comm
 * 
 * a standard response object for our Service requests.
 */
AD.Comm.Service = require('comm_service.js');

/* @class AD.Comm.Email 
 * @parent AD.Comm
 * 
 * An object to send email.
 */
AD.Comm.Email = require('comm_email.js');




AD.Permissions = require('permissions.js');



AD.App.Req = {};
AD.App.Req.Key = 'aRAD';
AD.App.Req.object = function (req) {
	if (typeof req[AD.App.Req.Key] == 'undefined') req[AD.App.Req.Key] = {};
	return req[AD.App.Req.Key];
}




/*
 * @class AD.App.Page
 * @parent AD_Server
 * 
 * Resources specifically for returning an HTML page to the browser.
 */
AD.App.Page = {};

/* @class AD.App.Page.addCSS : add an array of CSS file paths required by the current page.
 * @parent AD.App.Page
 * 
 * ##addCSS
 * This function adds a list of CSS definitions to be included on a new HTML
 * page request.  It is intended to be called by an app_interface object 
 * as it prepares the data to be returned by the Page.
 * 
 * ### Paths:
 * For CSS files provided by the system:  theme/[themeName]/css/[fileName].css
 * For CSS files provided by a Module  :  [moduleName]/data/css/[fileName].css
 * For CSS files provided by an Interface : [moduleName]/interfaces/[interfaceName]/css/[fileName].css
 * 
 * @param {Object} req      The Express supplied request object
 * @param {Array} listCSS   An array of paths to required css files
 */
AD.App.Page.addCSS = function( req, listCSS ) {
    // Helper function to compile required css for a page:
	var adObj = AD.App.Req.object(req);
    if (typeof adObj.response.listCSS == 'undefined') {
    	adObj.response.listCSS = [];
    }
        
    var defaultThemePath = 'theme/default/';  // the path for the default theme files
    var pathToTheme = 'theme/default/';		  // the path to the theme we should use 

//// TODO: get viewer's theme info and update pathToTheme with 
//// correct theme. 
    // pathToTheme = 'theme/'+ viewer.settings['theme] + '/';

    
    for (var indx = 0; indx < listCSS.length; indx++) {
    	adObj.response.listCSS.push(listCSS[indx].replace(defaultThemePath, pathToTheme));
    }
}



/* @class AD.App.Page.addJavascripts 
 * @parent AD.App.Page
 *
 * A utility function to add our required javascript files to our
 * Interface's response.
 */
AD.App.Page.addJavascripts = function( req, listJS ) {
    // Helper function to compile required Javascripts for a page:

    if (typeof req.aRAD.response.listJavascripts == 'undefined') {
        req.aRAD.response.listJavascripts = [];
    }

    
    for (var indx = 0; indx < listJS.length; indx++) {
        req.aRAD.response.listJavascripts.push(listJS[indx]);
    }
}





var renderEJS = function(fileName, tmplData, success, error) {
    // use ejs templating to render a fileName with data 
    
    fs.readFile(fileName, 'utf8', function(err,data) {
        
        if (err) {
            if (typeof error != 'undefined')  error(err);
        } else {
            // grab the js template for the interface and render it into
            // content
            var content = ejs.render(data, tmplData );
            if (typeof success != 'undefined') success(content);
        }
    });
}


var compileSiteTheme = function(req, content) {

    
    // Default Theme and Page Style settings:
    var keyTheme = 'default'; // can be requested by a Site Admin/ or a User
    var keyPageStyle = 'default'; // requested by an application (default page, empty page, etc...)
    
////TODO:  a viewer might have a site Theme chosen, we would select
////the 'siteContent.ejs' version for the Theme and send that here:
////  
////  - keyTheme = Viewer.preferences[theme]
    
    // if current request specifies a pageStyle
    if (req.aRAD.response.themePageStyle != null) {
        
        // use requested pageStyle
        keyPageStyle = req.aRAD.response.themePageStyle;
    }
        
    // verify requested Theme is valid
    if (typeof listThemes[keyTheme] == 'undefined') {
        
        AD.Util.Error('requested Theme['+keyTheme+'] not found! --> using Theme[default]');
        keyTheme = 'default';  // couldn't find requested Theme do default to default
    }
    
    // verify requested pageStyle is valid
    if (typeof listThemes[keyTheme][keyPageStyle] == 'undefined') {
        var errMsg = 'requested Style['+keyPageStyle+'] not found in Theme['+keyTheme+'] --> ';
        
        if (typeof listThemes['default'][keyPageStyle] != 'undefined') {
            errMsg += ' But Theme[default] does so using that!';
            keyTheme = 'default';
        } else {
            errMsg += ' So using Style[default] instead.';
            keyPageStyle = 'default';
        }
        AD.Util.Error(errMsg);
    }
    
    
    // by the time I get here, keyTheme and keyPageStyle should be valid, so now get 
    // detailed template info:
    var currentThemePath = __appdevPath+'/data/theme/'+keyTheme+'/';
    var themeFile = listThemes[keyTheme][keyPageStyle].pathTemplate; // /view/template.ejs
    
    
    // chosen  Theme might also define some css and javascripts to be loaded.  Add them here:
    var listCSS = listThemes[keyTheme][keyPageStyle].listCSS;
    for (var a in listCSS) {
        req.aRAD.response.listCSS.push('/theme/'+keyTheme+'/'+listCSS[a]);
    }
    
    var listJS = listThemes[keyTheme][keyPageStyle].listJavascripts;
    for (var a in listJS) {
        req.aRAD.response.listCSS.push(currentThemePath+keyTheme+'/'+listJS[a]);
    }

////TODO: also check to see if theme includes a 'layout.ejs' file, if so 
////then req.aRAD.response.layout= currentThemePath+'/views/layout.ejs'
////J: current thinking: don't need this.  appDev defines it's own layout.ejs, and templates tell it what they need.

    req.aRAD.response.Labels = req.aRAD.response.templateData.labels;
    req.aRAD._resPath = currentThemePath+themeFile;
}

//------------------------------------------------------------------------
var renderPage_compileContent = function(req, res, next) {
    
    AD.Util.Log(req,'   - renderPage_compileContent: getting content template['+req.aRAD.response.pathTemplate+']');
    
    var fileName = req.aRAD.response.pathTemplate;
    var tmplData = { locals: { data: req.aRAD.response.templateData} };
    renderEJS(fileName, tmplData, function(content) {
        
        // content is now the rendered content of our page:
        AD.Util.Log(req,'     renderPage_compileContent : content received ... ');
        req.aRAD.response.content = content;
        next();
         
        
     }, function(err){
         
        AD.Util.Error(req,'    * Error getting template:'+err);
        next(err);
         
     });
}


//------------------------------------------------------------------------
var renderPage_compileBody = function(req, res, next) {

    // now figure out all page details:
    compileSiteTheme(req);
    
    AD.Util.Log(req,'   - renderPage_compileBody: getting content template['+req.aRAD._resPath+']');
    // now req.aRAD._resPath = fileName
    // now req.aRAD.response = templateData
    var tmplData = { locals: req.aRAD.response  }; // <-- note undocumented EJS format!!!  had to look in code for this!
    renderEJS(req.aRAD._resPath, tmplData, function(content) {
        
        AD.Util.Log(req,'     renderPage_compileBody : content received ... ');
        req.aRAD._renderedBody = content;
        next();
        
    }, function(err){
        
        AD.Util.Error(req,'    * Error compiling Body:'+err);
        next(err);
    });
}


//------------------------------------------------------------------------
var renderPage_compilePage = function(req, res, next) {

    // now take the body and render to our layout:
    req.aRAD.response.body = req.aRAD._renderedBody;
  
    var fileName = __appdevPath+'/views/layout.ejs';
    AD.Util.Log(req,'   - renderPage_compilePage: getting content template['+fileName+']');
    // now req.aRAD._resPath = fileName
    // now req.aRAD.response = templateData
    req.aRAD.body = req.aRAD._renderedBody;
req.aRAD._renderedBody = '';
    var tmplData = { locals: req.aRAD.response  };  // <-- note undocumented EJS format!!!  had to look in code for this!
    renderEJS(fileName, tmplData, function(content) {
      
        AD.Util.Log(req,'     renderPage_compilePage : content received ... ');
        req.aRAD._renderedPage = content;
req.aRAD.body = '';
        next();
      
    }, function(err){
      
        AD.Util.Error(req,'    * Error compiling Body:'+err);
        next(err);
    });
}

//------------------------------------------------------------------------
// provide a function stack that will render the full page to req.aRAD._renderedPage
AD.App.Page.renderPageStack = [
    renderPage_compileContent,  // compile the content of the current app
    renderPage_compileBody,     // compile the Theme related Body (around the content)
    renderPage_compilePage      // now compile final layout with css & javascript requirements
];



AD.App.Page.returnPage = function(req, res ) {
  // Return a New Page based on our site layout
  
  if (req.aRAD.response) {
      AD.Util.Log(req,'   - returnPage: getting template['+req.aRAD.response.pathTemplate+']');
      fs.readFile(req.aRAD.response.pathTemplate, 'utf8', function(err,data) {
          
          // NOTE: another annoying EJS issue:
          // documentation says that any passed in param shows up as a local,
          // but in the code it is looking for a { locals:{} } object to hold your local variables.
          // sheesh!
          var tmplData = { locals: { data: req.aRAD.response.templateData} };


          // NOTE: in case I forget once again: 
          // express looks for a default 'layout.ejs' (or .xxx) in the 
          // view/ directory.  If there, then everything currently 
          // rendered will show up in that template as <%- body %>
          //
          // to overwrite that, you can do:
          // req.aRAD.response.layout: 'newLayout.ejs';
          // res.render('templatename.ejs', req.aRAD.response);


          // grab the js template for the interface and render it into
          // content
          var content = ejs.render(data, tmplData );
          req.aRAD.response.content = content;
          
          AD.Util.Log(req,'     content received ... ');
          
          // now figure out all page details:
          compileSiteTheme(req);

          AD.Util.LogDump(req,'   - rendering to browser');
          
          res.render( req.aRAD._resPath, req.aRAD.response ); 
          
      });
      
  } else {
      res.send('<h1>HeLLo WorLd!</h1>Thats all you get since I didnt have a req.aRAD.response object defined... ');
  }
  
}



//------------------------------------------------------------------------
AD.App.Page.returnLabelData = function(req, res ) {
  // respond to a label.js request
  //
  // steal data is part of our dependency checking system, it makes sure 
  // required javascript libraries are loaded and available before it 
  // runs your code.  
  //
  // The steal.js data is pulled from the 'siteContentStealData.ejs' 
  // template file.
  
  
  if (req.aRAD.response) {
      
      
      // our label data needs to know the current language_code:
      req.aRAD.response.lang= {
          language_code: req.aRAD.viewer.languageKey
      };


      // make sure we don't generate the outer layout for this one
      req.aRAD.response.layout = false;


      AD.Util.LogDump(req, '   - returnLabelData');
      
      
      res.render( 'siteReturnLabelData.ejs', req.aRAD.response );
      // Note: res.render() ends execution
  } else {
      res.send('Error: in AD.Page.returnLabelData(): req.aRAD.response object defined... ');
  }
  
}




//------------------------------------------------------------------------
AD.App.Page.returnStealData = function(req, res ) {
  // respond to the steal.js request
  //
  // steal data is part of our dependency checking system, it makes sure 
  // required javascript libraries are loaded and available before it 
  // runs your code.  
  //
  // The steal.js data is pulled from the 'siteContentStealData.ejs' 
  // template file.
  
  
  if (req.aRAD.response) {
      
      // make sure we don't generate the outer layout for this one
      req.aRAD.response.layout = false;

      AD.Util.LogDump(req, '   - returnStealData');
      res.render( 'siteContentStealData.ejs', req.aRAD.response );
      
  }
  
}



AD.App.Page.relativePath = function(pathFrom, path) {
	return path.replace(pathFrom, '');
}



//------------------------------------------------------------------------
AD.App.Page.relativePathFromRoot = function(givenPath) {
    // Return the given path as if it were from our Root dir/ 

    return AD.App.Page.relativePath(__appdevPath+'/', givenPath); //givenPath.replace(__appdevPath+'/', '');
}





/*
 * AD.App
 * 
 * Resources necessary for an application to plug into the framework.
 * 
 * AD.App.Interface : The interface object.
 * AD.App.Module : The Module object
 *  
 */
AD.App.Interface = require('app_interface.js');
AD.App.Module = require('app_module.js');
AD.App.Service = require('app_service.js');
AD.App.Themes = {};  // placeholder for our Theme info.

module.exports = AD;






////----------------------------------------------------------------------
////Load any of our Themes now
////
////Each module is responsible for defining any routes for their content
////
////The themes are defined as a directory in the /root/data/theme/ folder.
////
var pathThemes = './data/theme/';
var listThemes = {};
fs.readdir(pathThemes, function (err, files) {

    if (err) { 
        AD.Util.Log('');
        AD.Util.Error('*** Error Loading Themes ***');
        AD.Util.Error(err); 
        
    } else {
    
        AD.Util.Log('');
        AD.Util.Log('::: Loading Themes :::');
        for(var fi in files) {
        
            var dirName = files[fi];
        
            // don't include .xxx files
            if (dirName.indexOf(".") == 0) {
                continue;
            }
            
            var configPath = pathThemes + '/'+dirName+'/config.js';
            if (path.existsSync(configPath)) {
           
                AD.Util.Log('   - loading theme [ '+configPath+']');
                var modelObj = require('.'+configPath); // <-- stupid Path issue.  fs works from app.js dir/ require is local to this file.
        
                listThemes[dirName] = modelObj;
                
            } else {
                
                AD.Util.Error('   - theme [ '+configPath+'] has no config.js!');
            }
           
        } // next file[fi]
    
    } // end if err

});