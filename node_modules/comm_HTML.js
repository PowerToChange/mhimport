/**
 * @class AD.Comm.HTML
 * @parent AD.Comm
 *
 * ###HTML
 *
 * This module facilitates sending HTTP and HTTPS requests.  It is a small
 * wrapper around the nodeJS request module and uses virtually the same syntax.
 * 
 * The generic HTML.request() function can be used, but shortcut functions
 * for all common HTTP verbs (GET, POST, PUT, DELETE, and HEAD) are also
 * available. e.g. HTML.get(...), HTML.post(...), HTML.put(...), HTML.del(...), HTML.head(...)
 * 
 * See the <a href="https://github.com/mikeal/request">request module</a> on
 * github for more documentation.
 */

var request = require('request');
var $ = AD.jQuery;

var HTML = {};

/**
 * @function AD.Comm.HTML.request
 * @parent AD.Comm.HTML
 * 
 * This function sends an HTTP request (or HTTPS or another protocol).  It returns a
 * deferred promise that will resolve to the data returned from the request.  If the
 * request fails it will be rejected with an object whose 'error' property equals the
 * returned error object and whose 'body' property equals the returned data.  You can
 * also use the traditional onSuccess and onError callback functions which will receive
 * the same parameters of their resolved/rejected counterparts.
 * 
 * The 'options' parameter specifies options for the request.  See the
 * <a href="https://github.com/mikeal/request">request module</a> on github for more documentation.
 * 
 * @param {Object} options The options object
 * @param {Function} [optional] onSuccess Success callback
 * @param {Function} [optional] onError Error callback 
 * @return {Deferred} The deferred promise that will resolve to the data returned from the request
 */
HTML.request = function(options, onSuccess, onError) {
    // Create the deferred and attach the provided handlers (this still works even if the handlers are not passed in)
    var dfd = $.Deferred().then(onSuccess).fail(onError);
    request(options, function(error, response, body) {
        if (error) {
            dfd.reject({
                error: error,
                body: body
            });
        }
        else {
            // Attempt to parse the response as JSON, which might fail if the response is XML or some other format
            var data = body;
            try {
                data = JSON.parse(body);
            }
            catch(error) {}
            dfd.resolve(data);
        }
    });
    return dfd.promise();
};

// Expose a few functions in the request module
HTML.defaults = request.defaults;
HTML.cookie = request.cookie;
HTML.jar = request.jar;

// Create shortcuts for each of the HTTP verbs
var verbs = ['get', 'post', 'put', 'del', 'head'];
verbs.forEach(function(verb) {
    HTML[verb] = function(options) {
        // Modify the options parameter to include the HTTP method
        arguments[0] = $.extend({}, options, {method: verb.toUpperCase()});
        return HTML.request.apply(this, arguments);
    };
});

module.exports = HTML;
