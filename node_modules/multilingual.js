////
//// Multilingual
////
//// Our multilingual Label implementation
////
//// We store our multilingual labels in a data store: [mysql], [mongoDB], 
////
//// Labels are referenced by a unique Path/Key combo:
////    id:
////    path:
////    key:
////    language_code
////    label_key
////    label
////    

var url = require('url');

var loadedLabels = {};

var db = require('database.js').sharedDB();


//------------------------------------------------------------
var LabelObj = function ( options ) {
    // an object to manage returning Labels to our Interface 
    // templates.
    

    this.langKey = 'en';
    this.labels = {};
    
    for (var i in options) {
    
        this[i] = options[i];
    }
}

LabelObj.prototype.getLabel = function (key, attr) {

    if (typeof attr == 'undefined') attr = {};
    
    var tag = '<span ';
    var options = 'class="appLabel" key="'+key+'" langKey="'+this.langKey+'" ';
    var attrStr = '';
    for (var a in attr) {
        attrStr += a+'="'+attr[a]+'" ';
    }
    if (typeof this.labels[this.langKey] != 'undefined') {
        if (typeof this.labels[this.langKey][key] != 'undefined') {
        
            var obj = this.labels[this.langKey][key];
            for (var i in obj) {
                options += i+'="'+ obj[i] + '" ';
            }
            
            return tag+options+attrStr+'>'+this.labels[this.langKey][key].label+'</span>';
        } else {
        
            return tag+attrStr+' error="labelNotFound['+key+']" >'+key+'</span>';
        }
    } else {
        return tag+attrStr+'>['+this.langKey+']? '+key+'</span>';
    }

}



LabelObj.prototype.getLabelRaw = function (key) {


    if (typeof this.labels[this.langKey] != 'undefined') {
        if (typeof this.labels[this.langKey][key] != 'undefined') {
            return this.labels[this.langKey][key].label;
        } else {
        
            return '?['+key+']';
        }
    } else {
        return '['+this.langKey+']? '+key;
    }

}



//------------------------------------------------------------
exports.loadLabelsByPath = function (req, res, next) {
    // load label information for the req.url path
    // label information is stored in the req.aRAD.response.labels
    // object.

    var path = url.parse(req.url).pathname;
    if (typeof loadedLabels[path] == 'undefined') {

        var sql = ' SELECT * FROM '+AD.Defaults.dbName+'.site_multilingual_label WHERE label_path=?';

//console.log('sql['+sql+']');

        db.query(sql, [path], function (err, results, fields) {
        
            if (err) Log(req,err);

            var labels = {};

            for(var ri in results) {
            
                var langKey = results[ri].language_code;
                var labelKey = results[ri].label_key;
                
                if (!(langKey  in labels) ) {
                    labels[ langKey ] = {};
                }
                
                labels[langKey][labelKey] = {
                    label:results[ri].label_label,
                    labelID:results[ri].label_id,
                    path:results[ri].label_path
                };
                
            }
        
//console.log('loaded labels from DB:');
//console.log('  path['+path+']');
//console.log('  labels:');
//console.log(labels);

            loadedLabels[path] = new LabelObj( {labels:labels} );
            
//console.log('loadedLabels[path] :');
//console.log( loadedLabels[path] );

            req.aRAD.response.labels = loadedLabels[path];
            next();
        
        });
    }
    else {
    
        req.aRAD.response.labels = loadedLabels[path];
        next();
    
    }

}




var listLanguages = [];
exports.listLanguages = listLanguages;

exports.loadLanguages = function (req, res, next) {
/// return a label object for the given path


    if (listLanguages.length == 0) {

        var sql = ' SELECT * FROM '+AD.Defaults.dbName+'.site_multilingual_language';

//console.log('sql['+sql+']');

        db.query(sql, [], function (err, results, fields) {
        
            if (err) console.log(err);


            for(var ri in results) {
            
                var code = results[ri].language_code;
                var label = results[ri].language_label;
                
                listLanguages.push({ language_code:code, language_label:label});
            }
        

AD.Lang.listLanguages = listLanguages;
            req.aRAD.response.listLanguages = listLanguages;
            next();
        
        });

    
    
    } else {
    
        // we've already loaded our languageList, just store that.
        
        req.aRAD.response.listLanguages = listLanguages;
        next();
    
    }

}