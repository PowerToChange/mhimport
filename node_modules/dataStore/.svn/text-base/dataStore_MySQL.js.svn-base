////
//// dataStore_MySQL
////
//// Implements a DataStore that is backedup by a MySQL db.
////
//// DataStore's implement the common CRUD interface to their respective 
//// backend target.
////    


// reuse the shared DB of our site:
var myDB = require('database.js').sharedDB();


var create = function (dataMgr, callback) {
// return a new instance of our DB.

    var dbTable = dataMgr.dbTable;
    
    var columns = '';
    var values = [];
    var valuesText = '';
    
    for (var key in dataMgr.model) {
    
        if (columns != '') columns += ', ';
        columns += key;
        
        values.push( dataMgr.model[key]);
        
        if (valuesText != '') valuesText += ', ';
        valuesText += '?';
    }
    
    var sql = 'INSERT INTO '+dataMgr.dbName+'.'+dbTable+' ('+ columns + ') VALUES ('+valuesText + ')';
    
    myDB.query(sql, values, function( err, info) {
        
        if (err) console.log(err);
        
        var insertID = -1;
        if (typeof info != 'undefined') {
            if (typeof info.insertId != 'undefined') {
                insertID = info.insertId;
            }
        }
        callback( err, insertID );
    });
}
exports.create = create;





var read = function (dataMgr, callback) {
// return a new instance of our DB.

//console.log('--- dataStore.MySQL.read(): dataMgr ---');
//console.log(dataMgr);

    var dbTable = dataMgr.dbTable;
    
    var condition = dataMgr.cond || '';
    var values = [];
    
    // Which fields to retrieve?
    var select = '*';
    
    if (!dataMgr.selectedFields._empty) {
        delete dataMgr.selectedFields._empty;
        select = '';
        for (var key in dataMgr.selectedFields) {
            
            // These fields all have a tref prepended
            if (select != '') select += ', ';
            select += dataMgr.selectedFields[key].tref+'.'+key;
        }

    }
    
    // Any JOINs required?
    var tableName = dataMgr.dbName+'.'+dbTable;
    if (dataMgr.joinedTables.length > 0) {
        tableName += ' AS p';
        tableName += getJoinedTables(dataMgr.dbName, dataMgr.joinedTables, 'p', values);
    }
    
    // Build up the condition (WHERE) from the model
    for (var key in dataMgr.model) {
    
        if (condition != '') condition += ' AND ';
        var value = dataMgr.model[key];
        var fieldName = key;
        
        if ((typeof dataMgr.model[key] == 'object') && (value !== null)) {
            // More work needed
            value = dataMgr.model[key].value;
            if (typeof dataMgr.model[key].tref != 'undefined') {
                fieldName = dataMgr.model[key].tref+'.'+fieldName;
            }
        }
        condition += fieldName+'=?';
        
        values.push( value );
        
    }
    
    var sql = 'SELECT '+select+' FROM '+tableName;
    if (condition != '') sql += ' WHERE '+condition;
    
//console.log('dataStore.read()  : sql['+sql+']');
//console.log('dataStore.read()  : values --');
//console.log(values);

    myDB.query(sql, values, function( err, results, fields) {

        callback( err, results, fields );
    });
}
exports.read = read;

var getJoinedTables = function getJoinedTables (dbName, joinedTables, joinToTref, values) {
    var joinedTableString = '';
    for (var i = 0; i < joinedTables.length; i++ ) {
        var table = joinedTables[i];
        if (table.joinToTref == joinToTref) {
            // Call recursively to look for other tables joined to this one
            var lowerTables = getJoinedTables(dbName, joinedTables, table.tref);
            
            var open = (lowerTables == '') ? '' : '(';
            var close = (lowerTables == '') ? '' : ')';
            joinedTableString += ' ' + table.type+' JOIN '+open;
            joinedTableString += dbName+'.'+table.tableName;
            joinedTableString += ' AS '+table.tref;
            joinedTableString += lowerTables+close;
            joinedTableString += ' ON '+table.joinToTref+'.'+table.foreignKey;
            joinedTableString += ' = '+table.tref+'.'+ (table.referencedKey || table.foreignKey);
            if (typeof table.condition != 'undefined') {
                for (var j = 0; j < table.condition.length; j++ ) {
                    var condition = table.condition[j];
                    joinedTableString += ' AND '+condition.tref+'.'+condition.key+'=?';
                    values.push(condition.value);
                }
            }
        }
    }
    return joinedTableString;
}



var runSQL = function (sql, values, callback) {
// just run the sql and return .

    myDB.query(sql, values, function( err, results, fields) {

        callback( err, results, fields );
    });
}
exports.runSQL = runSQL;





var update = function (dataMgr, callback) {

    var dbTable = dataMgr.dbTable;
//console.log(dataMgr);    
    var condition = dataMgr.cond || '';
    var values = [];
    var fieldValues = '';
    
    for (var key in dataMgr.model) {
    
        if (fieldValues != '') fieldValues += ', ';
        fieldValues += key+'=?';
        
        values.push( dataMgr.model[key]);
        
    }
    
    if ((typeof dataMgr.id != 'undefined') 
        && (dataMgr.id > -1)) {
        
        if (condition != '') condition += ' AND ';
        condition += dataMgr.primaryKey+'=?';
        values.push(dataMgr.id);
        
    }
    
    var sql = 'UPDATE '+dataMgr.dbName+'.'+dbTable+' SET '+fieldValues;
    if (condition != '') sql += ' WHERE '+condition;
    
//console.log(' -- sql['+sql+'] ');
//console.log(values);
//console.log('');

    myDB.query(sql, values, function( err, results, fields) {
    
        callback( err, results );
    });

}
exports.update=update;


var destroy = function(dataMgr, callback) {


    var dbTable = dataMgr.dbTable;
    
    var condition = '';
    var values = [];
    
    for (var key in dataMgr.model) {
    
        if (condition != '') condition += ' AND ';
        condition += key+'=?';
        
        values.push( dataMgr.model[key]);
        
    }
    
    var sql = 'DELETE FROM '+dataMgr.dbName+'.'+dbTable;
    if (condition != '') sql += ' WHERE '+condition;
    

    myDB.query(sql, values, function( err, results, fields) {
    
        callback( err, results );
    });

}
exports.destroy = destroy;



var listDatabases = function (callback) {
    // generate a list of available databases

    var sql = 'SHOW DATABASES';
    myDB.query(sql, [], function( err, results, fields) {

        callback( err, results, fields );
    });
}
exports.listDatabases = listDatabases;



var listTables = function (dbName, callback) {
    // generate a list of available databases

    var sql = 'SHOW TABLES FROM '+dbName;
    myDB.query(sql, [], function( err, results, fields) {

        callback( err, results, fields );
    });
}
exports.listTables = listTables;



var listFields = function (dbName, dbTable, callback) {
    // generate a list of available databases

    var sql = 'SHOW COLUMNS FROM '+dbName+'.'+dbTable;
    myDB.query(sql, [], function( err, results, fields) {

        callback( err, results, fields );
    });
}
exports.listFields = listFields;




