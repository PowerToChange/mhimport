c({"name": "evil", "type": "attribute", "comment": "<pre><code>http://www.JSON.org/json2.js\n2011-02-23\n\nPublic Domain.\n\nNO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\nSee http://www.JSON.org/js.html\n\n\nThis code should be minified before deployment.\nSee http://javascript.crockford.com/jsmin.html\n\nUSE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\nNOT CONTROL.\n\n\nThis file creates a global JSON object containing two methods: stringify\nand parse.\n\n    JSON.stringify(value, replacer, space)\n        value       any JavaScript value, usually an object or array.\n\n        replacer    an optional parameter that determines how object\n                    values are stringified for objects. It can be a\n                    function or an array of strings.\n\n        space       an optional parameter that specifies the indentation\n                    of nested structures. If it is omitted, the text will\n                    be packed without extra whitespace. If it is a number,\n                    it will specify the number of spaces to indent at each\n                    level. If it is a string (such as '\\t' or '&amp;nbsp;'),\n                    it contains the characters used to indent at each level.\n\n        This method produces a JSON text from a JavaScript value.\n\n        When an object value is found, if the object contains a toJSON\n        method, its toJSON method will be called and the result will be\n        stringified. A toJSON method does not serialize: it returns the\n        value represented by the name/value pair that should be serialized,\n        or undefined if nothing should be serialized. The toJSON method\n        will be passed the key associated with the value, and this will be\n        bound to the value\n\n        For example, this would serialize Dates as ISO strings.\n\n            Date.prototype.toJSON = function (key) {\n                function f(n) {\n                    // Format integers to have at least two digits.\n                    return n &lt; 10 ? '0' + n : n;\n                }\n\n                return this.getUTCFullYear()   + '-' +\n                     f(this.getUTCMonth() + 1) + '-' +\n                     f(this.getUTCDate())      + 'T' +\n                     f(this.getUTCHours())     + ':' +\n                     f(this.getUTCMinutes())   + ':' +\n                     f(this.getUTCSeconds())   + 'Z';\n            };\n\n        You can provide an optional replacer method. It will be passed the\n        key and value of each member, with this bound to the containing\n        object. The value that is returned from your method will be\n        serialized. If your method returns undefined, then the member will\n        be excluded from the serialization.\n\n        If the replacer parameter is an array of strings, then it will be\n        used to select the members to be serialized. It filters the results\n        such that only members with keys listed in the replacer array are\n        stringified.\n\n        Values that do not have JSON representations, such as undefined or\n        functions, will not be serialized. Such values in objects will be\n        dropped; in arrays they will be replaced with null. You can use\n        a replacer function to replace those with JSON values.\n        JSON.stringify(undefined) returns undefined.\n\n        The optional space parameter produces a stringification of the\n        value that is filled with line breaks and indentation to make it\n        easier to read.\n\n        If the space parameter is a non-empty string, then that string will\n        be used for indentation. If the space parameter is a number, then\n        the indentation will be that many spaces.\n\n        Example:\n\n        text = JSON.stringify(['e', {pluribus: 'unum'}]);\n        // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n\n        text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n        // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n        text = JSON.stringify([new Date()], function (key, value) {\n            return this[key] instanceof Date ?\n                'Date(' + this[key] + ')' : value;\n        });\n        // text is '[\"Date(---current time---)\"]'\n\n\n    JSON.parse(text, reviver)\n        This method parses a JSON text to produce an object or array.\n        It can throw a SyntaxError exception.\n\n        The optional reviver parameter is a function that can filter and\n        transform the results. It receives each of the keys and values,\n        and its return value is used instead of the original value.\n        If it returns what it received, then the structure is not modified.\n        If it returns undefined then the member is deleted.\n\n        Example:\n\n        // Parse the text. Values that look like ISO date strings will\n        // be converted to Date objects.\n\n        myData = JSON.parse(text, function (key, value) {\n            var a;\n            if (typeof value === 'string') {\n                a =\n</code></pre>\n\n<p>/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });</p>\n\n<pre><code>        myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n            var d;\n            if (typeof value === 'string' &amp;&amp;\n                    value.slice(0, 5) === 'Date(' &amp;&amp;\n                    value.slice(-1) === ')') {\n                d = new Date(value.slice(5, -1));\n                if (d) {\n                    return d;\n                }\n            }\n            return value;\n        });\n\n\nThis is a reference implementation. You are free to copy, modify, or\nredistribute.\n</code></pre>", "src": "appDev/node_modules/socket.io/node_modules/socket.io-client/node_modules/uglify-js/tmp/app.js", "line": 14786, "children": []})