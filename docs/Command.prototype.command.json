c({"name": "Command.prototype.command", "params": {"name": {"description": "", "type": "String", "optional": false, "order": 0, "name": "name"}}, "ret": {"description": "<p>the new command</p>", "type": "Command"}, "type": "function", "comment": "<p>Add command <code>name</code>.</p>\n\n<p>The <code>.action()</code> callback is invoked when the\ncommand <code>name</code> is specified via <strong>ARGV</strong>,\nand the remaining arguments are applied to the\nfunction for access.</p>\n\n<p>When the <code>name</code> is \"*\" an un-matched command\nwill be passed as the first arg, followed by\nthe rest of <strong>ARGV</strong> remaining.</p>\n\n<p>Examples:</p>\n\n<pre><code> program\n   .version('0.0.1')\n   .option('-C, --chdir &lt;path&gt;', 'change the working directory')\n   .option('-c, --config &lt;path&gt;', 'set config path. defaults to ./deploy.conf')\n   .option('-T, --no-tests', 'ignore test hook')\n\n program\n   .command('setup')\n   .description('run remote setup commands')\n   .action(function(){\n     console.log('setup');\n   });\n\n program\n   .command('exec &lt;cmd&gt;')\n   .description('run the given remote command')\n   .action(function(cmd){\n     console.log('exec \"%s\"', cmd);\n   });\n\n program\n   .command('*')\n   .description('deploy the given env')\n   .action(function(env){\n     console.log('deploying \"%s\"', env);\n   });\n\n program.parse(process.argv);\n</code></pre>\n\n<p>@api public</p>", "src": "appDev/node_modules/socket.io/node_modules/socket.io-client/node_modules/ws/node_modules/commander/lib/commander.js", "line": 99, "children": []})