c({"name": "AD.App.Module.Module.prototype.initialize", "params": {"onError": {"description": "", "type": "", "optional": false, "order": 0, "name": "onError"}}, "ret": {"description": "<pre><code>A jQuery Deferred that will be resolved after all interfaces, models,\nservices, and scripts have been loaded.\n</code></pre>", "type": "Deferred"}, "type": "function", "parents": ["AD.App.Module"], "comment": "<p>route, we make sure our Client Models are \n    //// loaded:\n    //// \n    this.app.get('/init/' + this.nameModule + '/*', function(req, res, next) {</p>\n\n<pre><code>    log(req,'   - init/' + self.nameModule + '/*  : adding model dependencies.');\n\n    AD.App.Page.addJavascripts( req, self.moduleScripts );    // add any given .js scripts\n    AD.App.Page.addJavascripts( req, self.listModelPaths ); // add any models \n\n    next();\n});\n\n\n\n////\n//// Return any Module defined resources\n////\nvar localFile = function(req, res, next) {\n\n    log(req,'   - /' + self.nameModule + '/data/ being processed.');\n    var parts = req.url.split('/'+self.nameModule+'/');\n    var urlParts = parts[1].split('?');\n    var path = urlParts[0]; // without any additional params\n\n    res.sendfile( self.pathModule+'/'+path);\n}\n\n\nthis.app.get('/' + this.nameModule + '/data/*', localFile);\nthis.app.get('/scripts/' + this.nameModule + '/data/*', localFile);\n\n\n////\n//// Be sure to add any Module .css files to any of our page/ requests\n////\nthis.app.get('/page/' + this.nameModule + '/*', function(req, res, next) {\n\n    AD.App.Page.addCSS( req, self.moduleCSS );  // add any module .css files\n    next();\n});\n</code></pre>\n\n<p>}</p>\n\n<p>/**\n Performs the typical Module setup steps.</p>", "src": "appDev/node_modules/app_module.js", "line": 129, "children": []})