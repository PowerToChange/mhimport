c({"name": "res.partial", "params": {"view": {"description": "", "type": "String", "optional": false, "order": 0, "name": "view"}, "options": {"description": "", "type": "", "optional": false, "order": 1, "name": "options"}, "fn": {"description": "", "type": "Function", "optional": false, "order": 2, "name": "fn"}, "options,": {"order": 3, "description": "<p>collection, callback, or object</p>", "name": "options,", "type": "Object|Array|Function", "optional": false}}, "ret": {"description": "", "type": "String"}, "type": "function", "comment": "<p>Render <code>view</code> partial with the given <code>options</code>. Optionally a\ncallback <code>fn(err, str)</code> may be passed instead of writing to\nthe socket.</p>\n\n<p>Options:</p>\n\n<ul>\n<li><p><code>object</code> Single object with name derived from the view (unless <code>as</code> is present)</p></li>\n<li><p><code>as</code> Variable name for each <code>collection</code> value, defaults to the view name.</p>\n\n<ul><li>as: 'something' will add the <code>something</code> local variable</li>\n<li>as: this will use the collection value as the template context</li>\n<li>as: global will merge the collection value's properties with <code>locals</code></li></ul></li>\n<li><p><code>collection</code> Array of objects, the name is derived from the view name itself.\nFor example <em>video.html</em> will have a object <em>video</em> available to it.</p></li>\n</ul>\n\n<p>@api public</p>", "src": "appDev/node_modules/express/lib/view.js", "line": 231, "children": []})