c({"name": "Command.prototype.option", "params": {"flags": {"description": "", "type": "String", "optional": false, "order": 0, "name": "flags"}, "description": {"description": "", "type": "String", "optional": false, "order": 1, "name": "description"}, "fn": {"description": "<p>or default</p>", "type": "Function|Mixed", "optional": false, "order": 2, "name": "fn"}, "defaultValue": {"description": "", "type": "Mixed", "optional": false, "order": 3, "name": "defaultValue"}}, "ret": {"description": "<p>for chaining</p>", "type": "Command"}, "type": "function", "comment": "<p>Define option with <code>flags</code>, <code>description</code> and optional\ncoercion <code>fn</code>. </p>\n\n<p>The <code>flags</code> string should contain both the short and long flags,\nseparated by comma, a pipe or space. The following are all valid\nall will output this way when <code>--help</code> is used.</p>\n\n<p>\"-p, --pepper\"\n   \"-p|--pepper\"\n   \"-p --pepper\"</p>\n\n<p>Examples:</p>\n\n<pre><code>// simple boolean defaulting to false\nprogram.option('-p, --pepper', 'add pepper');\n\n--pepper\nprogram.pepper\n// =&gt; Boolean\n\n// simple boolean defaulting to false\nprogram.option('-C, --no-cheese', 'remove cheese');\n\nprogram.cheese\n// =&gt; true\n\n--no-cheese\nprogram.cheese\n// =&gt; true\n\n// required argument\nprogram.option('-C, --chdir &lt;path&gt;', 'change the working directory');\n\n--chdir /tmp\nprogram.chdir\n// =&gt; \"/tmp\"\n\n// optional argument\nprogram.option('-c, --cheese [type]', 'add cheese [marble]');\n</code></pre>\n\n<p>@api public</p>", "src": "appDev/node_modules/socket.io/node_modules/socket.io-client/node_modules/ws/node_modules/commander/lib/commander.js", "line": 236, "children": []})