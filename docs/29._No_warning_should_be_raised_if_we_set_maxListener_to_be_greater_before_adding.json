c({"name": "29&#46; No warning should be raised if we set maxListener to be greater before adding", "params": {"test": {"description": "", "type": "", "optional": false, "order": 0, "name": "test"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "comment": "<p>,\n   '11. A listener should support total wild card.': function (test) {</p>\n\n<pre><code>var emitter = this.emitter;\n\nemitter.on('*', function () {\n  test.ok(true, 'The event was raised');\n});\n\nemitter.emit('test14');\nemitter.emit('test14.ns1');\nemitter.emit('test14.ns1.ns2');\n\ntest.expect(1);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'12. A listener should support complex total wild card.': function (test) {</p>\n\n<pre><code>var emitter = this.emitter;\n\nemitter.on('*', function () {\n  test.ok(true, 'The event was raised');\n});\n\nemitter.emit('test15.*');\nemitter.emit('test15.*.ns2')\nemitter.emit('*');\n\ntest.expect(1);\ntest.done();\n</code></pre>\n\n<p>},\n  '13. Should be able to fire with wildcard start.' : function (test) {\n    var emitter = this.emitter;</p>\n\n<pre><code>emitter.on('test16', function () {\n  test.ok(true, 'The event test15 was raised');\n});\nemitter.on('test16.ns1', function () {\n  test.ok(true, 'The event test15.ns1 was raised');\n});\n\nemitter.emit('*');\nemitter.emit('*.ns1');\n\ntest.expect(2);\ntest.done();\n</code></pre>\n\n<p>},\n  '14. Should fail if delimiter is used to start or end event name.' : function (test) {\n    var emitter = this.emitter;</p>\n\n<pre><code>//nothing should emit, so here is a all-listener\nemitter.on('*.*.*', function () {\n  test.ok(false, 'an event was raised!');\n});\nemitter.on('*.*', function () {\n  test.ok(false, 'an event was raised!');\n});\nemitter.on('*', function () {\n  test.ok(false, 'an event was raised!');\n});\n\ntry {\n  emitter.on('.ns4', function () {\n    test.ok(false, 'The event .ns4 was raised');\n  });\n\n  emitter.emit('.ns4');\n}\ncatch(ex) {\n  test.ok(true, 'The event .ns4 was not raised');\n}\n\ntry {\n\n  emitter.on('ns4.', function () {\n    test.ok(false, 'The event .ns4 was raised');\n  });\n\n  emitter.emit('ns4.');\n}\ncatch(ex) {\n  test.ok(true, 'The event .ns4 was not raised');\n}\n\ntry {\n\n  emitter.on('.ns4', function () {\n    test.ok(false, 'The event .ns4 was raised');\n  });\n\n  emitter.emit('ns4.');\n}\ncatch(ex) {\n  test.ok(true, 'The event .ns4 was not raised');\n}\n\ntry {\n\n  emitter.on('.ns4', function () {\n    test.ok(false, 'The event .ns4 was raised');\n  });\n\n}\ncatch(ex) {\n  test.ok(true, 'The event .ns4 was not raised');\n}\n\ntry {\n\n  emitter.emit('ns4.');\n\n}\ncatch(ex) {\n  test.ok(true, 'The event .ns4 was not raised');\n}\n\ntry {\n  emitter.emit('some..bad');\n}\ncatch (ex) {\n  test.ok(true, 'error was raised');\n}\n\ntry {\n  emitter.on('some..bad', function () {\n    test.ok(false, 'a bad event was raised');\n  });\n}\ncatch (ex){\n  test.ok(true,'error was raised');\n}\n\ntest.expect(7);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'15. Should provide case sensitive option.' : function (test) {\n    var emitter  = this.emitter;</p>\n\n<pre><code>emitter.on('test18', function () {\n  test.ok(false, 'The event test18 was raised');\n});\nemitter.on('test18.ns1', function () {\n  test.ok(false, 'The event test18.ns1 was raised');\n});\n\nemitter.emit('Test18');\n\ntest.expect(0);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'16. one emit should be able to fire on multiple namespaces.' : function (test) {\n    var emitter  = this.emitter;</p>\n\n<pre><code>emitter.on('test19.*', function () {\n    test.ok(true, 'test19.* was raised');\n});\nemitter.on('test19.foo', function () {\n    test.ok(true, 'test19.foo was raised');\n});\n\nemitter.emit('test19.foo');\ntest.expect(2);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'17. should support case insensitivty (complex).' : function (test) {\n    if(typeof require !== 'undefined') {\n      EventEmitter2 = require('../lib/ee2').EventEmitter2;\n    }\n    else {\n      EventEmitter2 = window.EventEmitter2;\n    }</p>\n\n<pre><code>var emitter = new EventEmitter2({ caseSensitive : false});\n\nemitter.on('test20', function () {\n  test.ok(true, 'The event test20 was raised');\n});\nemitter.on('test20.ns1', function () {\n  test.ok(true, 'The event test20.ns1 was raised');\n});\nemitter.on('*.ns1', function () {\n  test.ok(true, 'The event *.ns1 was raised');\n});\nemitter.on('*.ns2', function () {\n  test.ok(false, 'The event *.ns2 was raised');\n});\n\nemitter.emit('Test20');\nemitter.emit('TeSt20.nS1');\n\ntest.expect(3);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'18. should be able to removeListeners' : function (test) {\n    var emitter = this.emitter;</p>\n\n<pre><code>var someFun = function () {\n  test.ok(true, 'someFunc was raised');\n}\n\nemitter.on('test21', someFun);\nemitter.on('test21.*', someFun);\nemitter.on('test21.ns1', someFun);\nemitter.on('test21.ns1.ns2', someFun);\n\nemitter.emit('test21'); //1\nemitter.emit('test21.ns2'); //1\nemitter.emit('test21.ns1'); //2\n\nvar listeners = emitter.listeners('test21');\ntest.ok(listeners.length === 1, 'there should be 1 listener');\n\nemitter.removeListener('test21', someFun);\nlisteners = emitter.listeners('test21');\ntest.ok(listeners.length === 0, 'there should be 0 listener (empty array)');\n\n// should be able to add more listeners after removing\nemitter.on('test21', someFun);\nemitter.on('test21', someFun);\nlisteners = emitter.listeners('test21');\ntest.ok(listeners.length === 2, 'there should be 2 listeners'); //1\n\nemitter.emit('test21'); //2\n\nemitter.removeListener('test21', someFun);  //this removes all listeners\nlisteners = emitter.listeners('test21');\ntest.ok(listeners.length === 1, 'there should be 1 listeners'); //1\nemitter.removeListener('test21', someFun);  //this removes all listeners\nlisteners = emitter.listeners('test21');\ntest.ok(listeners.length === 0, 'there should be 0 listeners'); //1\n\nemitter.emit('test21'); //0\n\nlisteners = emitter.listeners('test21.ns1');\ntest.ok(listeners.length === 1, 'there should be 1 listeners'); //1\n\nemitter.removeListener('test21.ns1', someFun); // remove one\nlisteners = emitter.listeners('test21.ns1');\ntest.ok(listeners.length === 0, 'there should be 0 listeners'); //1\n\nlisteners = emitter.listeners('test21.*');\ntest.ok(listeners.length === 1, 'there should be 1 listeners'); //1\nemitter.removeListener('test21.*', someFun); // remove one\nlisteners = emitter.listeners('test21.*');\ntest.ok(listeners.length === 0, 'there should be 0 listeners'); //1\n\ntest.expect(15);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'19. should be able to remove all listeners' : function (test) {</p>\n\n<pre><code>var emitter = this.emitter,\n    addedEvents = setHelper(emitter, test, 'test22');\n\nemitter.emit('test22'); //1\n\nvar listeners = emitter.listeners('test22');\ntest.ok(listeners.length === 1, 'there should be 1 listener'); //1\n\nemitter.removeAllListeners('test22');\nlisteners = emitter.listeners('test22'); \ntest.ok(listeners.length === 0, 'there should be 0 listener'); //1\n\nemitter.removeAllListeners('test22.ns1');\nlisteners = emitter.listeners('test22.ns1'); \ntest.ok(listeners.length === 0, 'there should be 0 listener'); //1\n\nemitter.removeAllListeners(); //removing all possible\nfor (var i = 0; i &lt; addedEvents.length; i++) {\n  listeners = emitter.listeners(addedEvents[i]);\n  test.ok(listeners.length === 0, 'there shouldn\\'t be at a listener');\n}\n\ntest.expect(addedEvents.length + 4 );\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'19. should be able to fire once and done' : function (test) {\n    var emitter = this.emitter,\n        addedEvents = setHelper(emitter,test,'test24');</p>\n\n<pre><code>emitter.once('test24once', function () {\n    test.ok(true, 'fired once');\n});\n\nemitter.emit('test24');\nemitter.emit('test24once');\nemitter.emit('test24once');\n\ntest.expect(2);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'20. should be able to fire many and done' : function (test) {</p>\n\n<pre><code>var emitter = this.emitter,\n    addedEvents = setHelper(emitter,test,'test25');\n\nemitter.many('test25many', 5, function () {\n    test.ok(true, 'test25many pewpew');\n});\n\nemitter.emit('test25'); //1\nfor (var i= 0; i &lt; 5; i++) {\n  emitter.emit('test25many'); //1\n}\nemitter.emit('test25many'); //0\n\ntest.expect(6);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'21. should be able to list all onAny listeners' : function (test) {\n    var emitter = this.emitter,\n        addedEvents = setHelper(emitter, test, 'test26'),\n        fn = function (tag) {\n          if (tag !== 'addListener') {\n            test.equals(tag, 'test26.ns5.ns5', 'emitted tag, and raised tag should match');\n            test.ok(true, 'something happened somewhere');\n          }\n        };</p>\n\n<pre><code>emitter.onAny(fn);\nemitter.emit('test26.ns5.ns5'); //2\nvar listeners = emitter.listenersAny();\ntest.equals(listeners.length, 1, 'should be one any listeners');\n\nemitter.offAny(fn);\nlisteners = emitter.listenersAny();\ntest.ok(listeners.length === 0, 'should be no any listeners');\n\nemitter.onAny(fn);\nemitter.onAny(fn);\nlisteners = emitter.listenersAny();\ntest.equals(listeners.length, 2, 'should be two any listeners');\n\nemitter.offAny();\nlisteners = emitter.listenersAny();\ntest.ok(listeners.length === 0, 'should be no any listeners');\n\ntest.expect(6);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'22. should not expand beyond the namespace' : function (test) {\n    var emitter = this.emitter,\n        addedEvents = setHelper(emitter,test,'test27');</p>\n\n<pre><code>emitter.emit('test27.ns2.ns3'); //1\nemitter.emit('test27.ns2.ns3.ns4'); //0\n\ntest.expect(1);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'23. should raise errors, if error is emitted and not caught' : function (test) {\n    var emitter = this.emitter,\n        error   = new Error('Something Funny Happened');</p>\n\n<pre><code>try {\n  emitter.emit('error');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'should be an Error');\n}\n\ntry {\n  emitter.emit('error', error);\n}\ncatch (ex) {\n  test.equal(error, ex, 'should have passed up the argument');\n}\n\nemitter.on('error', function (event, err) {\n  test.ok(true, 'error event was raised');\n  test.equal(err, error, 'of the error');\n});\n\nemitter.emit('error',error);\n\ntest.expect(4);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'24. should raise errors on namespaces, if error is emitted and not caught' : function (test) {\n    var emitter = this.emitter,\n        error   = new Error('Something Funny Happened');</p>\n\n<pre><code>emitter.on('foo.bar', function(){});\n\ntry {\n  emitter.emit('foo.error');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'should be an Error');\n}\n\ntry {\n  emitter.emit('foo.error', error);\n}\ncatch (ex) {\n  test.equal(error, ex, 'should have passed up the argument');\n}\n\nemitter.on('error', function (event, err) {\n  test.ok(true, 'error event was raised');\n  test.equal(err, error, 'of the error');\n});\n\nemitter.emit('error',error);\n\ntest.expect(4);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'25. should support old config for EE2' : function (test) {\n    if(typeof require !== 'undefined') {\n      EventEmitter2 = require('../lib/ee2').EventEmitter2;\n    }\n    else {\n      EventEmitter2 = window.EventEmitter2;\n    }\n    var emitter = new EventEmitter2({ \n      caseSensitive : true,\n      delimiter          : '?'\n    });</p>\n\n<pre><code>emitter.on('test30?a?b', function () {\n  test.ok(true, 'test30?a?b did emit');\n});\n\nemitter.emit('test30?a?b');\n\ntest.expect(1);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'26. should reject bad wildcard inputs' : function (test) {\n    var emitter = this.emitter;\n        addedEvents = setHelper(emitter,test,'test31');</p>\n\n<pre><code>emitter.onAny(function () {\n  test.ok(false, 'no event should be emitted, ever');\n});\n\n// try listening on a bad\ntry {\n  emitter.on('test31*', function () {\n    test.ok(false, 'should never registered');\n  });\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('*test31', function () {\n    test.ok(false, 'should never registered');\n  });\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('test*31', function () {\n    test.ok(false, 'should never registered');\n  });\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('test31.*a', function () {\n    test.ok(false, 'should never registered');\n  });\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('*test31.a*', function () {\n    test.ok(false, 'should never registered');\n  });\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('*test31.a*a', function () {\n    test.ok(false, 'should never registered');\n  });\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n\n//now try emittering with a bad wildcard\ntry {\n  emitter.emit('test31*')\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('*test31');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('test*31');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('test31.*a');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('*test31.a*');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n// bad wildcard at the front\ntry {\n  emitter.on('*test31.a*a');\n}\ncatch (ex) {\n  test.ok(ex instanceof Error, 'expected an error');\n}\n\ntest.expect(12);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'27. Should be able to start with 0 max listeners' : function (test) {</p>\n\n<pre><code>if(typeof require !== 'undefined') {\n  EventEmitter2 = require('../lib/ee2').EventEmitter2;\n}\nelse {\n  EventEmitter2 = window.EventEmitter2;\n}\ntry {\n  var emitter = new EventEmitter2({ \n    maxListeners : 0\n  });\n  emitter.on('no listeners', function () {\n    test.ok(false, 'no listener was raised');\n  });\n  test.ok(true, 'was able to make something');\n}\ncatch (ex) {\n  test.ok(false, 'Error was raised');\n}\n\ntest.expect(1);\ntest.done();\n</code></pre>\n\n<p>},</p>\n\n<p>'28. should raise maxListeners when too many are registerd' : function (test) {\n    var emitter = this.emitter;</p>\n\n<pre><code>emitter.on('maxListeners', function () {\n  test.ok(true, 'maxListeners fired');\n});\n\nfor (var i = 0; i &lt; 11 ; i++){\n  emitter.on('test33', function () {\n    test.ok(false, 'event was raised');\n  });\n}\n\nvar listeners = emitter.listeners('test33');\ntest.equal(listeners.length, 10, '10 listeners in total');\n\ntest.expect(2);\ntest.done();\n</code></pre>\n\n<p>} </p>", "src": "appDev/node_modules/eventemitter2/test/wildcardEvents/all.js", "line": 204, "children": []})