c({"name": "Permissions", "type": "class", "comment": "<h3>appDev Permissions System</h3>\n\n<p>An individual permission in the system is in the form of a <em>task</em>.</p>\n\n<h3>Tasks</h3>\n\n<p>A <em>task</em> represents a use case in the system. It's <code>task_key</code> should be\nin the format of:\n<em>[appKey].[subKey1].[subKey2].[...].[subKeyN].[verb]</em></p>\n\n<p>The <em>verb</em> signifies what kind of action is involved in the task. If \nnothing is specified, \"view\" is the implied verb. This standard is for\nthe purpose of human readability and organization. The system itself does\nnot try to interpret or enforce task verbs.</p>\n\n<p>A few example tasks:</p>\n\n<ul>\n<li><em>create new User Accounts</em>: <code>site.admin.accounts.create</code></li>\n<li><em>approve HRIS Personal Information Updates</em>: <code>hris.manageothers.piu.approve</code></li>\n<li><em>impersonate other accounts</em>: <code>site.admin.switcheroo</code></li>\n</ul>\n\n<p>Tasks can inherently imply dependencies. If a user has permission for a\ntask with a long <code>task_key</code>, he or she automatically also has permissions\nfor all the shorter versions of the task. Even if they have not been\ngranted explicitly.</p>\n\n<p>For example, having the first permission in this list implies also having\npermissions to all the others:</p>\n\n<ul>\n<li>hris.manageothers.piu.approve</li>\n<li>hris.manageothers.piu</li>\n<li>hris.manageothers</li>\n<li>hris</li>\n</ul>\n\n<h3>Roles</h3>\n\n<p>A role is a collection of tasks. Each user can be assigned one or more roles.</p>\n\n<h3>Super User</h3>\n\n<p>There is a special role called <code>root</code> that automatically grants permission\nto all tasks, even if they are not explicity assigned. This is intended only\nfor trusted administrators who know what they are doing.</p>\n\n<p>In addition, the user with <code>viewer_id</code> == 1 also has permissions to \neverything. This is the admin user who originally installed the system.</p>\n\n<h3>The Permissions Object (server side)</h3>\n\n<p><pre><code class='javascript'>var permissions = require('permissions.js');</code></pre>This object provides an interface to the site's permissions system. For\npermissions that relate to specific users, see <code>viewer.js</code> instead.</p>\n\n<p>For the client side, you may use the Models to access the various \npermissions related tables.</p>", "parents": ["AD_Server"], "src": "appDev/node_modules/permissions.js", "line": 0, "children": ["Permissions.createRole", "Permissions.sql", "Permissions.createRoles", "Permissions.createTask", "Permissions.sql", "Permissions.createTasks", "Permissions.assignTasksToRole", "Permissions.unassignTasksFromRole", "Permissions.roleExists", "Permissions.taskExists", "Permissions.roleHasTask", "Permissions.deleteTask", "Permissions.deleteTasks", "Permissions.deleteRole", "Permissions.deleteRoles"]})