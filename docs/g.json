c({"name": "g", "type": "attribute", "comment": "<p>Copyright 2011 The greplin-exception-catcher Authors.</p>\n\n<p>Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n\n<pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre>\n\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and</p>\n\n<h1>limitations under the License.</h1>\n\n<p>This Javascript file lets web applications get stacktraces for all uncaught JS exceptions and send them to Greplin\nException Catcher.</p>\n\n<p>Features include:\n - Stacktraces in IE 6-8, as well as modern versions of Firefox, Chrome, and Opera\n - Javascript execution entry point information (such as event type and listener) on IE 6-9 and modern versions of\n   Firefox, Chrome, Safari, and Opera\n - Redaction of URLs and strings in stacktraces to avoid logging sensitive user information</p>\n\n<p>Things that aren't done yet:\n - Aggregation. Due to the way GEC works now, this would be impossible to do without losing potentially useful\n   information. To do this, GEC needs to be able to aggregate based upon a normalized stacktrace while still providing detailed information for each specific incident of the exception.\n - Can't wrap DOM0 events (<div onclick> for example).\n - Some code cleanup: Since this is a small, self-contained project, I took sort of a \"hack it until it works\" approach\n   to coding it. I'd like to go back and structure the code better sometime, but I probably wont' get around to it\n   anytime soon since it works very reliably as it is.</p>\n\n<p>How to use it:\n1. Create an endpoint at your server to send this stuff to GEC.\n2. Modify the call to g.errorCatcher at the end of the file to pass in functions that pass exceptions to GEC and that\n   redact URLs respectively. (Note: your URL redaction function will be passed strings that may contain URLs, not bare\n   URLs, so keep that in mind)\n3. Wrap your JS files if you want to capture errors during their initial execution:\n    try {  var your<em>js</em>here  }\n   catch(e) { window.g &amp;&amp; g.handleInitialException &amp;&amp; g.handleInitialException(e, '(script filename here)') }\n    If you use Closure Compiler, just do\n   --output_wrapper=\"window.COMPILED = true; try { %%output%% } catch(e) { window.g &amp;&amp; g.handleInitialException &amp;&amp; g.handleInitialException(e, '(script filename here)') }\"\n4. This exception catching script can't see exceptions that happen before it's loaded, so make sure it's loaded early in\n   your page before most of your other scripts.</p>", "src": "appDev/node_modules/socket.io/node_modules/socket.io-client/node_modules/uglify-js/tmp/app.js", "line": 13148, "children": []})