c({"name": "AD.Comm.Notification", "type": "class", "comment": "<p>The Notification object provides a Publish/Subscribe notification system for\nuse by server side modules to communicate and respond to system wide events.</p>\n\n<p>A common example of this would be when a new viewer account is added to the \nsite.  An installed module might want the ability to create some default\ncontent for this new user.</p>\n\n<h2>Usage</h2>\n\n<p>In order to alert the system of an event, you would publish a message:</p>\n\n<pre><code class='javascript'>AD.Comm.Notification.publish('site.viewer.created', {id:1, guid:'Neo'});</code></pre>\n\n<p>If you want to write a routine to respond to new viewers in the system \nthen you would need to subscribe to the event:</p>\n\n<pre><code class='javascript'>var updateInitialAccessTable = function(event, viewerInfo) {\n   // here event == 'site.viewer.created'\n   // take viewerInfo and update my DB\n}\nAD.Comm.Notification.subscribe('site.viewer.created', updateInitialAccessTable);</code></pre>\n\n<p>Now every time the system posts a 'site.viewer.created' event, the \nupdateInitialAccessTable() is called.</p>\n\n<h2>Wildcards</h2>\n\n<p>Suppose you want to write a method that catches multiple types of events, you\ncan use a wildcard ('*') to represent those events.  For example, if you \nwant to catch all the site related events and log them to the console:</p>\n\n<pre><code class='javascript'>var logEmAll = function( event, data ) {\n    console.log(' received event['+event+']');\n}\nAD.Comm.Notification.subscribe('site.*', logEmAll);</code></pre>\n\n<p>This would then catch 'site.viewer.created' as well as 'site.module.added'. </p>\n\n<h2>Sandbox</h2>\n\n<p>The AD.Comm.Notification messaging system is open to all modules and code \non the system. There might be times when you don't want the whole system \nto know about individual events but want to implement a notification system\nfor just a specific module or scope.  </p>\n\n<p>In this case you can create a sandbox for that use.  The sandbox is isolated\nfrom all other instances of the notification hubs, so messages within the \nsandbox are private.</p>\n\n<p>A module could implement it's own sandbox like so:</p>\n\n<pre><code class='javascript'>var TopSecretHub = AD.Comm.Notification.sandbox();\n\nvar myReponder = function( event, data) {\n\n   // this does not respond to the system 'site.viewer.created'\n}\n\nTopSecretHub.subscribe('site.viewer.created', myResponder);\n\n....\n\nTopSecretHub.publish('site.viewer.created', { some:'data' });</code></pre>\n\n<h2>Removing your subscriptions</h2>\n\n<p>It is possible you only want to receive an event one time and then remove \nthe listener from the queue.  Use the unsubscribe method:</p>\n\n<pre><code class='javascript'>var responder = function( event, data ) {\n    console.log(' received event['+event+']');\n    AD.Comm.Notification.unsubscribe(key);\n}\nvar key = AD.Comm.Notification.subscribe('site.*', responder);\n\nAD.Comm.Notification.publish('site.test', { id:1 });\nAD.Comm.Notification.publish('site.test', { id:1 }); // <- does not call responder.</code></pre>\n\n<h2>A Module's Public and Private API's</h2>\n\n<p>As a designer you should think through carefully what events you want to expose\nto the rest of the system and what events should be considered private.</p>\n\n<p>To implement a public event API, simply include a 'subscription_publicAPI.js' module \nin your appDev/modules/[module]/services/ folder and do something like:</p>\n\n<pre><code class='javascript'>var publicAPIs = function(event, data) {\n\n if (event == 'site.viewer.created') {\n     var publicData = { id: data.viewer_id, guid:data.viewer_guid};\n     AD.Comm.Notification.publish('site.viewer.created', publicData);\n } \n\n if (event == 'site.module.added') {\n     var publicData = { key:data.module_key , version:data.module_version};\n     AD.Comm.Notification.publish('site.module.new', publicData);\n }\n\n}\n\nModuleHub.subscribe('site.*', publicAPIs);\n</code></pre>", "parents": ["AD.Comm"], "src": "appDev/node_modules/comm_notification.js", "line": 0, "children": ["AD.Comm.Notification.publish", "AD.Comm.Notification.subscribe", "AD.Comm.Notification.unsubscribe", "AD.Comm.Notification.sandbox"]})