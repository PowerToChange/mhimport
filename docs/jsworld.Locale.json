c({"name": "jsworld.Locale", "type": "class", "comment": "<p>Represents a POSIX-style locale with its numeric, monetary and date/time \nproperties. Also provides a set of locale helper methods.</p>\n\n<p><p>The locale properties follow the POSIX standards:</p>\n\n<ul>\n    <li><a href=\"http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap07.html#tag_07_03_04\">POSIX LC_NUMERIC</a>\n    <li><a href=\"http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap07.html#tag_07_03_03\">POSIX LC_MONETARY</a>\n    <li><a href=\"http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap07.html#tag_07_03_05\">POSIX LC_TIME</a>\n</ul>\n\n<p>@public\n@throws @throws Error on a undefined or invalid locale property.</p>", "construct": "<p>properties.</p>", "ret": {"type": "jsworld.locale", "description": ""}, "description": "Creates a new locale object (POSIX-style) with the specified", "params": {"properties": {"order": 0, "description": "<p>An object containing the raw locale properties:</p>", "name": "properties", "type": "object", "optional": false}, "properties.decimal_point": {"order": 1, "description": "<pre><code>   A string containing the symbol that shall be used as the decimal\n   delimiter (radix character) in numeric, non-monetary formatted\n   quantities. This property cannot be omitted and cannot be set to the\n   empty string.\n</code></pre>", "name": "properties.decimal_point", "type": "String", "optional": false}, "properties.thousands_sep": {"order": 2, "description": "<pre><code>   A string containing the symbol that shall be used as a separator for\n   groups of digits to the left of the decimal delimiter in numeric,\n   non-monetary formatted monetary quantities.\n</code></pre>", "name": "properties.thousands_sep", "type": "String", "optional": false}, "properties.grouping": {"order": 3, "description": "<pre><code>   Defines the size of each group of digits in formatted non-monetary\n   quantities. The operand is a sequence of integers separated by\n   semicolons. Each integer specifies the number of digits in each group,\n   with the initial integer defining the size of the group immediately\n   preceding the decimal delimiter, and the following integers defining\n   the preceding groups. If the last integer is not -1, then the size of\n   the previous group (if any) shall be repeatedly used for the\n   remainder of the digits. If the last integer is -1, then no further\n   grouping shall be performed.\n</code></pre>", "name": "properties.grouping", "type": "String", "optional": false}, "properties.int_curr_symbol": {"order": 4, "description": "<pre><code>   The first three letters signify the ISO-4217 currency code,\n   the fourth letter is the international symbol separation character\n   (normally a space).\n</code></pre>", "name": "properties.int_curr_symbol", "type": "String", "optional": false}, "properties.currency_symbol": {"order": 5, "description": "<pre><code>   The local shorthand currency symbol, e.g. \"$\" for the en_US locale\n</code></pre>", "name": "properties.currency_symbol", "type": "String", "optional": false}, "properties.mon_decimal_point": {"order": 6, "description": "<pre><code>   The symbol to be used as the decimal delimiter (radix character)\n</code></pre>", "name": "properties.mon_decimal_point", "type": "String", "optional": false}, "properties.mon_thousands_sep": {"order": 7, "description": "<pre><code>   The symbol to be used as a separator for groups of digits to the\n   left of the decimal delimiter.\n</code></pre>", "name": "properties.mon_thousands_sep", "type": "String", "optional": false}, "properties.mon_grouping": {"order": 8, "description": "<pre><code>   A string that defines the size of each group of digits. The\n   operand is a sequence of integers separated by semicolons (\";\").\n   Each integer specifies the number of digits in each group, with the\n   initial integer defining the size of the group preceding the\n   decimal delimiter, and the following integers defining the\n   preceding groups. If the last integer is not -1, then the size of\n   the previous group (if any) must be repeatedly used for the\n   remainder of the digits. If the last integer is -1, then no\n   further grouping is to be performed.\n</code></pre>", "name": "properties.mon_grouping", "type": "String", "optional": false}, "properties.positive_sign": {"order": 9, "description": "<pre><code>   The string to indicate a non-negative monetary amount.\n</code></pre>", "name": "properties.positive_sign", "type": "String", "optional": false}, "properties.negative_sign": {"order": 10, "description": "<pre><code>   The string to indicate a negative monetary amount.\n</code></pre>", "name": "properties.negative_sign", "type": "String", "optional": false}, "properties.frac_digits": {"order": 11, "description": "<pre><code>   An integer representing the number of fractional digits (those to\n   the right of the decimal delimiter) to be written in a formatted\n   monetary quantity using currency_symbol.\n</code></pre>", "name": "properties.frac_digits", "type": "integer Number", "optional": false}, "properties.int_frac_digits": {"order": 12, "description": "<pre><code>   An integer representing the number of fractional digits (those to\n   the right of the decimal delimiter) to be written in a formatted\n   monetary quantity using int_curr_symbol.\n</code></pre>", "name": "properties.int_frac_digits", "type": "integer Number", "optional": false}, "properties.p_cs_precedes": {"order": 13, "description": "<pre><code>   An integer set to 1 if the currency_symbol precedes the value for a\n   monetary quantity with a non-negative value, and set to 0 if the\n   symbol succeeds the value.\n</code></pre>", "name": "properties.p_cs_precedes", "type": "integer Number", "optional": false}, "properties.n_cs_precedes": {"order": 14, "description": "<pre><code>   An integer set to 1 if the currency_symbol precedes the value for a\n   monetary quantity with a negative value, and set to 0 if the symbol\n   succeeds the value.\n</code></pre>", "name": "properties.n_cs_precedes", "type": "integer Number", "optional": false}, "properties.p_sep_by_space": {"order": 15, "description": "<pre><code>   Set to a value indicating the separation of the currency_symbol,\n   the sign string, and the value for a non-negative formatted monetary\n   quantity:\n\n        &lt;p&gt;0 No space separates the currency symbol and value.&lt;/p&gt;\n\n        &lt;p&gt;1 If the currency symbol and sign string are adjacent, a space\n             separates them from the value; otherwise, a space separates\n             the currency symbol from the value.&lt;/p&gt;\n\n        &lt;p&gt;2 If the currency symbol and sign string are adjacent, a space\n             separates them; otherwise, a space separates the sign string\n             from the value.&lt;/p&gt;\n</code></pre>", "name": "properties.p_sep_by_space", "type": "integer Number", "optional": false}, "properties.n_sep_by_space": {"order": 16, "description": "<pre><code>   Set to a value indicating the separation of the currency_symbol,\n   the sign string, and the value for a negative formatted monetary\n   quantity. Rules same as for p_sep_by_space.\n</code></pre>", "name": "properties.n_sep_by_space", "type": "integer Number", "optional": false}, "properties.p_sign_posn": {"order": 17, "description": "<pre><code>   An integer set to a value indicating the positioning of the\n   positive_sign for a monetary quantity with a non-negative value:\n\n   &lt;p&gt;0 Parentheses enclose the quantity and the currency_symbol.&lt;/p&gt;\n\n   &lt;p&gt;1 The sign string precedes the quantity and the currency_symbol.&lt;/p&gt;\n\n   &lt;p&gt;2 The sign string succeeds the quantity and the currency_symbol.&lt;/p&gt;\n\n   &lt;p&gt;3 The sign string precedes the currency_symbol.&lt;/p&gt;\n\n   &lt;p&gt;4 The sign string succeeds the currency_symbol.&lt;/p&gt;\n</code></pre>", "name": "properties.p_sign_posn", "type": "integer Number", "optional": false}, "properties.n_sign_posn": {"order": 18, "description": "<p>An integer set to a value indicating the positioning of the\n  negative<em>sign for a negative formatted monetary quantity. Rules same\n  as for p</em>sign_posn.</p>", "name": "properties.n_sign_posn", "type": "integer Number", "optional": false}, "properties.int_p_cs_precedes": {"order": 19, "description": "<p>An integer set to 1 if the int<em>curr</em>symbol precedes the value for a\n  monetary quantity with a non-negative value, and set to 0 if the\n  symbol succeeds the value.</p>", "name": "properties.int_p_cs_precedes", "type": "integer Number", "optional": false}, "properties.int_n_cs_precedes": {"order": 20, "description": "<p>An integer set to 1 if the int<em>curr</em>symbol precedes the value for a\n  monetary quantity with a negative value, and set to 0 if the symbol\n  succeeds the value.</p>", "name": "properties.int_n_cs_precedes", "type": "integer Number", "optional": false}, "properties.int_p_sep_by_space": {"order": 21, "description": "<p>Set to a value indicating the separation of the int<em>curr</em>symbol,\n  the sign string, and the value for a non-negative internationally\n  formatted monetary quantity. Rules same as for p<em>sep</em>by_space.</p>", "name": "properties.int_p_sep_by_space", "type": "integer Number", "optional": false}, "properties.int_n_sep_by_space": {"order": 22, "description": "<p>Set to a value indicating the separation of the int<em>curr</em>symbol,\n  the sign string, and the value for a negative internationally\n  formatted monetary quantity. Rules same as for p<em>sep</em>by_space.</p>", "name": "properties.int_n_sep_by_space", "type": "integer Number", "optional": false}, "properties.int_p_sign_posn": {"order": 23, "description": "<p>An integer set to a value indicating the positioning of the\n  positive<em>sign for a positive monetary quantity formatted with the\n  international format. Rules same as for p</em>sign_posn.</p>", "name": "properties.int_p_sign_posn", "type": "integer Number", "optional": false}, "properties.int_n_sign_posn": {"order": 24, "description": "<p>An integer set to a value indicating the positioning of the\n  negative<em>sign for a negative monetary quantity formatted with the\n  international format. Rules same as for p</em>sign_posn.</p>", "name": "properties.int_n_sign_posn", "type": "integer Number", "optional": false}, "properties.abday": {"order": 25, "description": "<pre><code>   The abbreviated weekday names, corresponding to the %a conversion\n   specification. The property must be either an array of 7 strings or\n   a string consisting of 7 semicolon-separated substrings, each \n   surrounded by double-quotes. The first must be the abbreviated name \n   of the day corresponding to Sunday, the second the abbreviated name \n   of the day corresponding to Monday, and so on.\n</code></pre>", "name": "properties.abday", "type": "String[] | String", "optional": false}, "properties.day": {"order": 26, "description": "<pre><code>   The full weekday names, corresponding to the %A conversion\n   specification. The property must be either an array of 7 strings or\n   a string consisting of 7 semicolon-separated substrings, each \n   surrounded by double-quotes. The first must be the full name of the \n   day corresponding to Sunday, the second the full name of the day \n   corresponding to Monday, and so on.\n</code></pre>", "name": "properties.day", "type": "String[] | String", "optional": false}, "properties.abmon": {"order": 27, "description": "<pre><code>   The abbreviated month names, corresponding to the %b conversion\n   specification. The property must be either an array of 12 strings or\n   a string consisting of 12 semicolon-separated substrings, each \n   surrounded by double-quotes. The first must be the abbreviated name \n   of the first month of the year (January), the second the abbreviated \n   name of the second month, and so on.\n</code></pre>", "name": "properties.abmon", "type": "String[] | String", "optional": false}, "properties.mon": {"order": 28, "description": "<pre><code>   The full month names, corresponding to the %B conversion\n   specification. The property must be either an array of 12 strings or\n   a string consisting of 12 semicolon-separated substrings, each \n   surrounded by double-quotes. The first must be the full name of the \n   first month of the year (January), the second the full name of the second \n   month, and so on.\n</code></pre>", "name": "properties.mon", "type": "String[] | String", "optional": false}, "properties.d_fmt": {"order": 29, "description": "<pre><code>   The appropriate date representation. The string may contain any\n   combination of characters and conversion specifications (%&lt;char&gt;).\n</code></pre>", "name": "properties.d_fmt", "type": "String", "optional": false}, "properties.t_fmt": {"order": 30, "description": "<pre><code>   The appropriate time representation. The string may contain any\n   combination of characters and conversion specifications (%&lt;char&gt;).\n</code></pre>", "name": "properties.t_fmt", "type": "String", "optional": false}, "properties.d_t_fmt": {"order": 31, "description": "<pre><code>   The appropriate date and time representation. The string may contain\n   any combination of characters and conversion specifications (%&lt;char&gt;).\n</code></pre>", "name": "properties.d_t_fmt", "type": "String", "optional": false}, "properties.am_pm": {"order": 32, "description": "<pre><code>   The appropriate representation of the ante-meridiem and post-meridiem\n   strings, corresponding to the %p conversion specification. The property \n   must be either an array of 2 strings or a string consisting of 2 \n   semicolon-separated substrings, each surrounded by double-quotes. \n   The first string must represent the ante-meridiem designation, the \n   last string the post-meridiem designation.\n</code></pre>", "name": "properties.am_pm", "type": "String[] | String", "optional": false}}, "src": "appDev/node_modules/socket.io/node_modules/socket.io-client/node_modules/uglify-js/tmp/uglify-hangs.js", "line": 715, "children": ["jsworld.Locale._className", "jsworld.Locale._parseList", "jsworld.Locale._validateFormatString", "jsworld.Locale.getAbbreviatedWeekdayName", "jsworld.Locale.getWeekdayName", "jsworld.Locale.getAbbreviatedMonthName", "jsworld.Locale.getMonthName", "jsworld.Locale.getDecimalPoint", "jsworld.Locale.getCurrencySymbol", "jsworld.Locale.getIntCurrencySymbol", "jsworld.Locale.currencySymbolPrecedes", "jsworld.Locale.intCurrencySymbolPrecedes", "jsworld.Locale.getMonetaryDecimalPoint", "jsworld.Locale.getFractionalDigits", "jsworld.Locale.getIntFractionalDigits"]})